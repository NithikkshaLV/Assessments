# -*- coding: utf-8 -*-
"""LVADSUSR171_clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R6PxIhjqX8fFD6_7hKP8NN3SMNqTkvOa
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from scipy.cluster.hierarchy import dendrogram, linkage
from scipy.cluster.hierarchy import fcluster
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler,LabelEncoder
from sklearn.cluster import KMeans


import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv("/content/Mall_Customers.csv")
df.head()

df.describe(include='all').T

df.info()

df.isnull().sum()

df.columns

df.rename(columns={'Annual Income (k$)':'Annual_Income)'}, inplace=True)

df.dtypes

df.duplicated().sum()

df.select_dtypes(include = ['float64','int64']).corr()

for column in df.select_dtypes(include=['float64','int64']):
  sns.boxplot(df[[column]])

for column in df.select_dtypes(include = "number"):
  q1 = df[column].quantile(0.25)
  q3 = df[column].quantile(0.75)
  iqr = q3-q1
  lower = q1 - 1.5*iqr
  upper = q3 + 1.5* iqr
  df[column] = df[column].clip(lower = lower, upper= upper)

#label Encoding
le = LabelEncoder()
for c in df.select_dtypes(include = ['object']).columns:
  df[c] = le.fit_transform(df[c])

df.columns

km = KMeans(n_clusters=4)
y_pred = km.fit_predict(df[['CustomerID','Spending Score (1-100)']])

df['cluster'] = y_pred

df1 = df[df.cluster == 0]
df2 = df[df.cluster == 1]
df3 = df[df.cluster == 2]
df4 = df[df.cluster == 3]

plt.scatter(df1.CustomerID,df1['Spending Score (1-100)'],color='green')
plt.scatter(df2.CustomerID,df2['Spending Score (1-100)'],color='blue')
plt.scatter(df3.CustomerID,df3['Spending Score (1-100)'],color='black')
plt.scatter(df4.CustomerID,df4['Spending Score (1-100)'],color='orange')

plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='red',marker='*',label='centroid')
plt.xlabel('CustomerID')
plt.ylabel('Spending Score (1-100)')
plt.legend()

silhouette_score(df, y_pred)

k_range = range(1,10)
sse = []
for k in k_range:
  km = KMeans(n_clusters=k)
  km.fit(df[['Spending Score (1-100)','CustomerID']])
  sse.append(km.inertia_)

plt.xlabel('Clusters')
plt.ylabel('SSE value')
plt.plot(k_range,sse,marker='.')

print("Inertia:", km.inertia_)























